C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Rilind\
                    -Desktop\System_project\Exam_Project\Exam_Project_2\F99x-98x_SMBus_Master\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND 
                    -ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/
                    -Rilind/Desktop/System_project/Exam_Project/Exam_Project_2/F99x-98x_SMBus_Master/inc;C:/SiliconLabs/SimplicityStudio/v4/d
                    -eveloper/sdks/8051/v4.1.1//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Devic
                    -e/C8051F990/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_C8051F990_Register_Enums.h>
  11          #include "InitDevice.h"
  12          // USER PROTOTYPES
  13          // USER FUNCTIONS
  14          
  15          
  16          //==============================================================================
  17          // enter_DefaultMode_from_RESET
  18          //==============================================================================
  19          extern void enter_DefaultMode_from_RESET(void) {
  20   1              // $[Config Calls]
  21   1              PCA_0_enter_DefaultMode_from_RESET();
  22   1              VREG_0_enter_DefaultMode_from_RESET();
  23   1              HFOSC_0_enter_DefaultMode_from_RESET();
  24   1              //RTC_0_enter_DefaultMode_from_RESET();
  25   1      
  26   1              CLOCK_0_enter_DefaultMode_from_RESET();
  27   1              //TIMER01_0_enter_DefaultMode_from_RESET();
  28   1              TIMER16_2_enter_DefaultMode_from_RESET();
  29   1              UART_0_enter_DefaultMode_from_RESET();
  30   1      
  31   1              // [Config Calls]$
  32   1      }
  33          
  34          
  35          //================================================================================
  36          // PCA_0_enter_DefaultMode_from_RESET
  37          //================================================================================
  38          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  39   1              // $[Watchdog Disable]
  40   1              // Stop Watchdog
  41   1              // If MCU is reset by WDT before it runs to main(), please disable it in SILABS_STARTUP.A51
  42   1              SFRPAGE = 0x00;
  43   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  44   1      
  45   1      
  46   1      
  47   1      
  48   1      
  49   1      }
  50          
  51          //================================================================================
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 2   

  52          // VREG_0_enter_DefaultMode_from_RESET
  53          //================================================================================
  54          extern void VREG_0_enter_DefaultMode_from_RESET(void) {
  55   1              // $[REG0CN - Voltage Regulator Control]
  56   1              /*
  57   1              // OSCBIAS (High Frequency Oscillator Bias) = ENABLED (Enable the
  58   1              //     precision High Frequency Oscillator bias.)
  59   1              */
  60   1              REG0CN = REG0CN_OSCBIAS__ENABLED;
  61   1              // [REG0CN - Voltage Regulator Control]$
  62   1      
  63   1      
  64   1      }
  65          
  66          //================================================================================
  67          // HFOSC_0_enter_DefaultMode_from_RESET
  68          //================================================================================
  69          extern void HFOSC_0_enter_DefaultMode_from_RESET(void) {
  70   1              // $[OSCICL - High Frequency Oscillator Calibration]
  71   1              // [OSCICL - High Frequency Oscillator Calibration]$
  72   1      
  73   1              // $[OSCICN - High Frequency Oscillator Control]
  74   1              /*
  75   1              // IOSCEN (High Frequency Oscillator Enable) = ENABLED (High Frequency
  76   1              //     Oscillator enabled.)
  77   1              */
  78   1              OSCICN |= OSCICN_IOSCEN__ENABLED;
  79   1              // [OSCICN - High Frequency Oscillator Control]$
  80   1      
  81   1      
  82   1      }
  83          
  84          //================================================================================
  85          // CLOCK_0_enter_DefaultMode_from_RESET
  86          //================================================================================
  87          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
  88   1              // $[CLKSEL - Clock Select]
  89   1              /*
  90   1              // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
  91   1              //     selected clock source divided by 1.)
  92   1              // CLKSL (Clock Source Select) = HFOSC (Clock derived from the internal
  93   1              //     precision High-Frequency Oscillator.)
  94   1              */
  95   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_32 | CLKSEL_CLKSL__LPOSC;
  96   1              // [CLKSEL - Clock Select]$
  97   1      
  98   1      
  99   1      }
 100          
 101          //================================================================================
 102          // PORTS_1_enter_Mode2_from_DefaultMode
 103          //================================================================================
 104          extern void PORTS_1_enter_Mode2_from_DefaultMode(void) {
 105   1              // $[P1 - Port 1 Pin Latch]
 106   1      
 107   1              SFRPAGE = 0x00;
 108   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN | P1MDOUT_B2__OPEN_DRAIN
 109   1              | P1MDOUT_B3__PUSH_PULL | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
 110   1              | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 111   1              // [P1MDOUT - Port 1 Output Mode]$
 112   1      
 113   1              // $[P1MDIN - Port 1 Input Mode]
 114   1              // [P1MDIN - Port 1 Input Mode]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 3   

 115   1      
 116   1              // $[P1SKIP - Port 1 Skip]
 117   1              // [P1SKIP - Port 1 Skip]$
 118   1      
 119   1              // $[P1MASK - Port 1 Mask]
 120   1              // [P1MASK - Port 1 Mask]$
 121   1      
 122   1              // $[P1MAT - Port 1 Match]
 123   1              // [P1MAT - Port 1 Match]$
 124   1      
 125   1              // $[P1DRV - Port 1 Drive Strength]
 126   1              // [P1DRV - Port 1 Drive Strength]$
 127   1      
 128   1      
 129   1      }
 130          
 131          //================================================================================
 132          // PBCFG_0_enter_Mode2_from_DefaultMode
 133          //================================================================================
 134          extern void PBCFG_0_enter_Mode2_from_DefaultMode(void) {
 135   1              // $[XBR2 - Port I/O Crossbar 2]
 136   1              /*
 137   1              // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 138   1              //     Pullups enabled (except for Ports whose I/O are configured for analog
 139   1              //     mode).)
 140   1              // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 141   1              */
 142   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 143   1              // [XBR2 - Port I/O Crossbar 2]$
 144   1      
 145   1              // $[XBR0 - Port I/O Crossbar 0]
 146   1              /*
 147   1              // URT0E (UART I/O Output Enable) = DISABLED (UART I/O unavailable at
 148   1              //     Port pin.)
 149   1              // SPI0E (SPI I/O Enable) = DISABLED (SPI I/O unavailable at Port pins.)
 150   1              // SMB0E (SMBus0 I/O Enable) = ENABLED (SMBus0 I/O routed to Port pins.)
 151   1              // CP0E (Comparator0 Output Enable) = DISABLED (CP0 unavailable at Port
 152   1              //     pin.)
 153   1              // CP0AE (Comparator0 Asynchronous Output Enable) = DISABLED
 154   1              //     (Asynchronous CP0 unavailable at Port pin.)
 155   1              // SYSCKE (SYSCLK Output Enable) = DISABLED (SYSCLK unavailable at Port
 156   1              //     pin.)
 157   1              */
 158   1              XBR0 = XBR0_URT0E__ENABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 159   1              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_SYSCKE__DISABLED;
 160   1              // [XBR0 - Port I/O Crossbar 0]$
 161   1      
 162   1              // $[XBR1 - Port I/O Crossbar 1]
 163   1              // [XBR1 - Port I/O Crossbar 1]$
 164   1      
 165   1      
 166   1      }
 167          
 168          //================================================================================
 169          // TIMER01_0_enter_Mode2_from_DefaultMode
 170          //================================================================================
 171          extern void TIMER00_0_enter_Mode2_from_DefaultMode(void) {
 172   1              // $[Timer Initialization]
 173   1              //Save Timer Configuration
 174   1              U8 TCON_save = TCON;
 175   1              //Stop Timers
 176   1              TCON &= TCON_TR0__BMASK & TCON_TR1__BMASK;
 177   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 4   

 178   1              // [Timer Initialization]$
 179   1      
 180   1              // $[TH0 - Timer 0 High Byte]
 181   1              // [TH0 - Timer 0 High Byte]$
 182   1      
 183   1              // $[TL0 - Timer 0 Low Byte]
 184   1              // [TL0 - Timer 0 Low Byte]$
 185   1      
 186   1              // $[TH1 - Timer 1 High Byte]
 187   1              // [TH1 - Timer 1 High Byte]$
 188   1      
 189   1              // $[TL1 - Timer 1 Low Byte]
 190   1              /*
 191   1              // TL1 (Timer 1 Low Byte) = 52
 192   1              */
 193   1              TH0 =255;
 194   1      
 195   1              // [TL1 - Timer 1 Low Byte]$
 196   1      
 197   1              // $[Timer Restoration]
 198   1              //Restore Timer Configuration
 199   1              TCON = TCON_save;
 200   1      
 201   1              // [Timer Restoration]$
 202   1      
 203   1      
 204   1      }
 205          
 206          //================================================================================
 207          // TIMER16_3_enter_Mode2_from_DefaultMode
 208          //================================================================================
 209          extern void TIMER16_3_enter_Mode2_from_DefaultMode(void) {
 210   1              // $[Timer Initialization]
 211   1              // Save Timer Configuration
 212   1              U8 TMR3CN_TR3_save = TMR3CN & TMR3CN_TR3__BMASK;
 213   1              // Stop Timer
 214   1              TMR3CN &= ~(TMR3CN_TR3__BMASK);
 215   1              // [Timer Initialization]$
 216   1      
 217   1              // $[TMR3CN - Timer 3 Control]
 218   1              // [TMR3CN - Timer 3 Control]$
 219   1      
 220   1              // $[TMR3H - Timer 3 High Byte]
 221   1              /*
 222   1              // TMR3H (Timer 3 High Byte) = 56
 223   1              */
 224   1              TMR3H = (56 << TMR3H_TMR3H__SHIFT);
 225   1              // [TMR3H - Timer 3 High Byte]$
 226   1      
 227   1              // $[TMR3L - Timer 3 Low Byte]
 228   1              /*
 229   1              // TMR3L (Timer 3 Low Byte) = 158
 230   1              */
 231   1              TMR3L = (158 << TMR3L_TMR3L__SHIFT);
 232   1              // [TMR3L - Timer 3 Low Byte]$
 233   1      
 234   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 235   1              /*
 236   1              // TMR3RLH (Timer 3 Reload High Byte) = 56
 237   1              */
 238   1              TMR3RLH = (56 << TMR3RLH_TMR3RLH__SHIFT);
 239   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 240   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 5   

 241   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 242   1              /*
 243   1              // TMR3RLL (Timer 3 Reload Low Byte) = 158
 244   1              */
 245   1              TMR3RLL = (158 << TMR3RLL_TMR3RLL__SHIFT);
 246   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 247   1      
 248   1              // $[TMR3CN]
 249   1              /*
 250   1              // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 251   1              */
 252   1              TMR3CN |= TMR3CN_TR3__RUN;
 253   1              // [TMR3CN]$
 254   1      
 255   1              // $[Timer Restoration]
 256   1              // Restore Timer Configuration
 257   1              TMR3CN |= TMR3CN_TR3_save;
 258   1              // [Timer Restoration]$
 259   1      
 260   1      
 261   1      }
 262          //================================================================================
 263          // RTC_0_enter_DefaultMode_from_RESET
 264          //================================================================================
 265          extern void RTC_0_enter_DefaultMode_from_RESET(void) {
 266   1              // $[RTC Initialization]
 267   1              // A variable for providing a delay for external oscillator startup
 268   1              U16 delayCounter;
 269   1      
 270   1              // Save the system clock (the system clock will be slowed during the startup delay)
 271   1              U8 CLKSEL_save = CLKSEL;
 272   1      
 273   1              // Enable power to the SmaRTClock oscillator circuit (RTC0EN = 1)
 274   1              // [RTC Initialization]$
 275   1      
 276   1              // $[RTC0XCN - RTC Oscillator Control: Initial start-up setting]
 277   1              // Set SmaRTClock to Crystal Mode (XMODE = 1).
 278   1              // Disable Automatic Gain Control (AGCEN) and enable Bias Doubling (BIASX2) for fast crystal startup.
 279   1              RTC0ADR = RTC0XCN;
 280   1              RTC0DAT = RTC0XCN_XMODE__CRYSTAL | RTC0XCN_BIASX2__ENABLED;
 281   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 282   1              // [RTC0XCN - RTC Oscillator Control: Initial start-up setting]$
 283   1      
 284   1              // $[RTC0XCF - RTC Oscillator Configuration]
 285   1              /*
 286   1              // AUTOSTP (Automatic Load Capacitance Stepping Enable) = ENABLED (Enable
 287   1              //     load capacitance stepping.)
 288   1              // LOADCAP (Load Capacitance Programmed Value) = 3
 289   1              */
 290   1      
 291   1              RTC0ADR = RTC0XCF;
 292   1              RTC0DAT = RTC0XCF_AUTOSTP__ENABLED | (3 << RTC0XCF_LOADCAP__SHIFT);
 293   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 294   1              // [RTC0XCF - RTC Oscillator Configuration]$
 295   1      
 296   1              // $[CAPTURE0 - RTC Timer Capture 0]
 297   1              // [CAPTURE0 - RTC Timer Capture 0]$
 298   1      
 299   1              // $[CAPTURE1 - RTC Timer Capture 1]
 300   1              // [CAPTURE1 - RTC Timer Capture 1]$
 301   1      
 302   1              // $[CAPTURE2 - RTC Timer Capture 2]
 303   1              // [CAPTURE2 - RTC Timer Capture 2]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 6   

 304   1      
 305   1              // $[CAPTURE3 - RTC Timer Capture 3]
 306   1              // [CAPTURE3 - RTC Timer Capture 3]$
 307   1      
 308   1              // $[ALARM0 - RTC Alarm Programmed Value 0]
 309   1              // [ALARM0 - RTC Alarm Programmed Value 0]$
 310   1      
 311   1              // $[ALARM1 - RTC Alarm Programmed Value 1]
 312   1              // [ALARM1 - RTC Alarm Programmed Value 1]$
 313   1      
 314   1              // $[ALARM2 - RTC Alarm Programmed Value 2]
 315   1              /*
 316   1              // ALARM2 (RTC Alarm Programmed Value 2) = 1
 317   1              */
 318   1              RTC0ADR = ALARM2;
 319   1              RTC0DAT = (1 << ALARM2_ALARM2__SHIFT);
 320   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 321   1              // [ALARM2 - RTC Alarm Programmed Value 2]$
 322   1      
 323   1              // $[ALARM3 - RTC Alarm Programmed Value 3]
 324   1              // [ALARM3 - RTC Alarm Programmed Value 3]$
 325   1      
 326   1              // $[RTC0CN - RTC Control]
 327   1              /*
 328   1              // RTC0EN (RTC Enable) = ENABLED (Enable RTC oscillator.)
 329   1              */
 330   1              RTC0ADR = RTC0CN;
 331   1              RTC0DAT = 0;
 332   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 333   1      
 334   1              RTC0ADR = RTC0CN;
 335   1              RTC0DAT |= RTC0CN_RTC0EN__ENABLED;
 336   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 337   1      
 338   1              // [RTC0CN - RTC Control]$
 339   1      
 340   1              // $[External Oscillator Setup]
 341   1              // Set the clock to a known value for the delay
 342   1              CLKSEL = CLKSEL_CLKSL__LPOSC | CLKSEL_CLKDIV__SYSCLK_DIV_32;
 343   1      
 344   1              // Delay for > 20 ms
 345   1              for (delayCounter=0x150;delayCounter!=0;delayCounter--);
 346   1      
 347   1              // Poll the SmaRTClock Clock Valid Bit (CLKVLD) until the crystal oscillator stabilizes
 348   1              do {
 349   2              RTC0ADR = RTC0ADR_BUSY__SET | RTC0ADR_ADDR__RTC0XCN;
 350   2              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 351   2              } while ((RTC0DAT & RTC0XCN_CLKVLD__BMASK)== RTC0XCN_CLKVLD__NOT_SET);
 352   1      
 353   1              // Poll the SmaRTClock Load Capacitance Ready Bit (LOADRDY) until the load capacitance reaches its progra
             -mmed value
 354   1              do {
 355   2              RTC0ADR = RTC0ADR_BUSY__SET | RTC0ADR_ADDR__RTC0XCF;
 356   2              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 357   2              } while ((RTC0DAT & RTC0XCF_LOADRDY__BMASK)== RTC0XCF_LOADRDY__NOT_SET);
 358   1      
 359   1              // Enable Automatic Gain Control (AGCEN) and disable Bias Doubling (BIASX2) for maximum power savings
 360   1              /*
 361   1              // XMODE (RTC Oscillator Mode) = CRYSTAL (Crystal Mode selected.)
 362   1              // AGCEN (RTC Oscillator Automatic Gain Control (AGC) Enable) = ENABLED
 363   1              //     (Enable AGC.)
 364   1              // BIASX2 (RTC Oscillator Bias Double Enable) = DISABLED (Disable the
 365   1              //     Bias Double feature.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 7   

 366   1              // LFOEN (Low Frequency Oscillator Enable and Select) = DISABLED (XMODE
 367   1              //     determines RTC oscillator source.)
 368   1              */
 369   1              RTC0ADR = RTC0XCN;
 370   1              RTC0DAT = RTC0XCN_XMODE__CRYSTAL | RTC0XCN_AGCEN__ENABLED | RTC0XCN_BIASX2__DISABLED
 371   1                       | RTC0XCN_LFOEN__DISABLED;
 372   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 373   1      
 374   1              // Enable the SmaRTClock missing clock detector.
 375   1              /*
 376   1              // MCLKEN (Missing RTC Detector Enable) = ENABLED (Enable missing RTC
 377   1              //     detector.)
 378   1              */
 379   1              RTC0ADR = RTC0CN;
 380   1              RTC0DAT |= RTC0CN_MCLKEN__ENABLED;
 381   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 382   1      
 383   1              // Delay for > 2 ms
 384   1              for (delayCounter=0x100;delayCounter!=0;delayCounter--);
 385   1      
 386   1              // Clear PMU wake-up source flags
 387   1              PMU0CF = PMU0CF_CLEAR__ALL_FLAGS;
 388   1      
 389   1              // Restore system clock
 390   1              CLKSEL = CLKSEL_save;
 391   1              // Poll CLKRDY to wait for the clock to stabilize
 392   1              while(!((CLKSEL & CLKSEL_CLKRDY__BMASK) == CLKSEL_CLKRDY__SET));
 393   1      
 394   1              /*
 395   1              // RTC0EN (RTC Enable) = ENABLED (Enable RTC oscillator.)
 396   1              // RTC0TR (RTC Timer Run Control) = STOP (RTC timer is stopped.)
 397   1              // MCLKEN (Missing RTC Detector Enable) = ENABLED (Enable missing RTC
 398   1              //     detector.)
 399   1              // RTC0AEN (RTC Alarm Enable) = DISABLED (Disable RTC alarm.)
 400   1              // ALRM (RTC Alarm Event Flag and Auto Reset Enable) = NOT_SET (Alarm
 401   1              //     event flag is not set or disable the auto reset function.)
 402   1              // RTC0CAP (RTC Timer Capture) = NOT_SET (Do not start a capture
 403   1              //     operation.)
 404   1              // RTC0SET (RTC Timer Set) = NOT_SET (Do not start a set operation.)
 405   1              */
 406   1              RTC0ADR = RTC0CN;
 407   1              RTC0DAT = RTC0CN_RTC0EN__ENABLED | RTC0CN_RTC0TR__STOP | RTC0CN_MCLKEN__ENABLED
 408   1                       | RTC0CN_RTC0AEN__DISABLED | RTC0CN_ALRM__NOT_SET | RTC0CN_RTC0CAP__NOT_SET
 409   1                       | RTC0CN_RTC0SET__NOT_SET;
 410   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 411   1      
 412   1              // [External Oscillator Setup]$
 413   1      
 414   1      
 415   1      }
 416          extern void RSTSRC_0_enter_DefaultMode_from_RESET(void) {
 417   1              // $[RSTSRC - Reset Source]
 418   1              /*
 419   1              // C0RSEF (Comparator0 Reset Enable and Flag) = NOT_SET (A Comparator 0
 420   1              //     reset did not occur.)
 421   1              // MCDRSF (Missing Clock Detector Enable and Flag) = SET (A missing clock
 422   1              //     detector reset occurred.)
 423   1              // PORSF (Power-On / Supply Monitor Reset Flag, and Supply Monitor Reset
 424   1              //     Enable) = SET (A power-on or supply monitor reset occurred.)
 425   1              // RTC0RE (RTC Reset Enable and Flag) = NOT_SET (A RTC alarm or
 426   1              //     oscillator fail reset did not occur.)
 427   1              // SWRSF (Software Reset Force and Flag) = NOT_SET (A software reset did
 428   1              //     not occur.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 8   

 429   1              */
 430   1              RSTSRC = RSTSRC_C0RSEF__NOT_SET | RSTSRC_MCDRSF__SET | RSTSRC_PORSF__SET
 431   1                       | RSTSRC_RTC0RE__NOT_SET | RSTSRC_SWRSF__NOT_SET;
 432   1              // [RSTSRC - Reset Source]$
 433   1      
 434   1      
 435   1      }
 436          
 437          //================================================================================
 438          // TIMER_SETUP_0_enter_Mode2_from_DefaultMode
 439          //================================================================================
 440          extern void TIMER_SETUP_0_enter_Mode2_from_DefaultMode(void) {
 441   1              // $[CKCON - Clock Control]
 442   1              // [CKCON - Clock Control]$
 443   1      
 444   1              // $[TMOD - Timer 0/1 Mode]
 445   1              /*
 446   1              // T0M (Timer 0 Mode Select) = MODE0 (Mode 0, 13-bit Counter/Timer)
 447   1              // CT0 (Counter/Timer 0 Select) = TIMER (Timer Mode. Timer 0 increments
 448   1              //     on the clock defined by T0M in the CKCON register.)
 449   1              // GATE0 (Timer 0 Gate Control) = DISABLED (Timer 0 enabled when TR0 = 1
 450   1              //     irrespective of /INT0 logic level.)
 451   1              // T1M (Timer 1 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
 452   1              //     Auto-Reload)
 453   1              // CT1 (Counter/Timer 1 Select) = TIMER (Timer Mode. Timer 1 increments
 454   1              //     on the clock defined by T1M in the CKCON register.)
 455   1              // GATE1 (Timer 1 Gate Control) = DISABLED (Timer 1 enabled when TR1 = 1
 456   1              //     irrespective of /INT1 logic level.)
 457   1              */
 458   1              CKCON = CKCON_SCA__SYSCLK_DIV_4  | CKCON_T1M__SYSCLK|CKCON_T0M__SYSCLK;
 459   1      
 460   1              TMOD = TMOD_T0M__MODE2 | TMOD_CT0__TIMER | TMOD_GATE0__DISABLED
 461   1              | TMOD_T1M__MODE2 | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 462   1      
 463   1              // [TMOD - Timer 0/1 Mode]$
 464   1      
 465   1              // $[TCON - Timer 0/1 Control]
 466   1              /*
 467   1              // TR1 (Timer 1 Run Control) = RUN (Start Timer 1 running.)
 468   1              */
 469   1              TCON |= TCON_TR0__RUN;
 470   1              TCON |= TCON_TR1__RUN;
 471   1              // [TCON - Timer 0/1 Control]$
 472   1      
 473   1      
 474   1      }
 475          
 476          //================================================================================
 477          // SMBUS_0_enter_Mode2_from_DefaultMode
 478          //================================================================================
 479          extern void SMBUS_0_enter_Mode2_from_DefaultMode(void) {
 480   1              // $[SMB0CF - SMBus 0 Configuration]
 481   1              /*
 482   1              // SMBCS (SMBus Clock Source Selection) = TIMER1 (Timer 1 Overflow.)
 483   1              // ENSMB (SMBus Enable) = ENABLED (Enable the SMBus module.)
 484   1              // SMBFTE (SMBus Free Timeout Detection Enable) = FREE_TO_ENABLED (Enable
 485   1              //     bus free timeouts. The bus the bus will be considered free if SCL and
 486   1              //     SDA remain high for more than 10 SMBus clock source periods.)
 487   1              // SMBTOE (SMBus SCL Timeout Detection Enable) = SCL_TO_ENABLED (Enable
 488   1              //     SCL low timeouts.)
 489   1              // EXTHOLD (SMBus Setup and Hold Time Extension Enable) = ENABLED (Enable
 490   1              //     SDA extended setup and hold times.)
 491   1              // INH (SMBus Slave Inhibit) = SLAVE_DISABLED (Slave states are
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 9   

 492   1              //     inhibited.)
 493   1              */
 494   1              SMB0CF = SMB0CF_SMBCS__TIMER0 | SMB0CF_ENSMB__ENABLED | SMB0CF_SMBFTE__FREE_TO_ENABLED
 495   1              | SMB0CF_SMBTOE__SCL_TO_ENABLED | SMB0CF_EXTHOLD__ENABLED | SMB0CF_INH__SLAVE_DISABLED;
 496   1              // [SMB0CF - SMBus 0 Configuration]$
 497   1      
 498   1              // $[SMB0ADR - SMBus 0 Slave Address]
 499   1              // [SMB0ADR - SMBus 0 Slave Address]$
 500   1      
 501   1              // $[SMB0ADM - SMBus 0 Slave Address Mask]
 502   1              // [SMB0ADM - SMBus 0 Slave Address Mask]$
 503   1      
 504   1      
 505   1      }
 506          
 507          //================================================================================
 508          // INTERRUPT_0_enter_Mode2_from_DefaultMode
 509          //================================================================================
 510          extern void INTERRUPT_0_enter_Mode2_from_DefaultMode(void) {
 511   1              // $[EIE1 - Extended Interrupt Enable 1]
 512   1              /*
 513   1              // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 514   1              //     ADC0 Conversion Complete interrupt.)
 515   1              // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 516   1              //     interrupts.)
 517   1              // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 518   1              //     (Disable all PCA0 interrupts.)
 519   1              // ERTC0A (RTC Alarm Interrupt Enable) = DISABLED (Disable RTC Alarm
 520   1              //     interrupts.)
 521   1              // ESMB0 (SMBus (SMB0) Interrupt Enable) = ENABLED (Enable interrupt
 522   1              //     requests generated by SMB0.)
 523   1              // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 524   1              //     generated by the TF3L or TF3H flags.)
 525   1              // EWADC0 (Window Comparison ADC0 Interrupt Enable) = DISABLED (Disable
 526   1              //     ADC0 Window Comparison interrupt.)
 527   1              */
 528   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_ECP0__DISABLED | EIE1_EPCA0__DISABLED
 529   1              | EIE1_ERTC0A__DISABLED | EIE1_ESMB0__ENABLED | EIE1_ET3__DISABLED
 530   1              | EIE1_EWADC0__DISABLED;
 531   1              // [EIE1 - Extended Interrupt Enable 1]$
 532   1      
 533   1              // $[EIP1 - Extended Interrupt Priority 1]
 534   1              // [EIP1 - Extended Interrupt Priority 1]$
 535   1      
 536   1              // $[IE - Interrupt Enable]
 537   1              /*
 538   1              // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 539   1              //     to its individual mask setting.)
 540   1              // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 541   1              //     interrupt 0.)
 542   1              // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 543   1              //     interrupt 1.)
 544   1              // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 545   1              //     interrupts.)
 546   1              // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 547   1              //     interrupt.)
 548   1              // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 549   1              //     interrupt.)
 550   1              // ET2 (Timer 2 Interrupt Enable) = DISABLED (Disable Timer 2 interrupt.)
 551   1              // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 552   1              */
 553   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 554   1              | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__ENABLED | IE_ES0__DISABLED;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 10  

 555   1              // [IE - Interrupt Enable]$
 556   1      
 557   1              // $[IP - Interrupt Priority]
 558   1              // [IP - Interrupt Priority]$
 559   1      
 560   1              // $[EIE2 - Extended Interrupt Enable 2]
 561   1              // [EIE2 - Extended Interrupt Enable 2]$
 562   1      
 563   1              // $[EIP2 - Extended Interrupt Priority 2]
 564   1              // [EIP2 - Extended Interrupt Priority 2]$
 565   1      
 566   1      
 567   1      }
 568          extern void UART_0_enter_DefaultMode_from_RESET(void) {
 569   1              // $[SCON0 - UART0 Serial Port Control]
 570   1              /*
 571   1              // REN (Receive Enable) = RECEIVE_ENABLED (UART0 reception enabled.)
 572   1              */
 573   1              SCON0 |= SCON0_REN__RECEIVE_ENABLED;
 574   1              // [SCON0 - UART0 Serial Port Control]$
 575   1      
 576   1      
 577   1      }
 578          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 579   1              // $[Timer Initialization]
 580   1              //Save Timer Configuration
 581   1              U8 TCON_save = TCON;
 582   1              //Stop Timers
 583   1              TCON &= TCON_TR0__BMASK & TCON_TR1__BMASK;
 584   1      
 585   1              // [Timer Initialization]$
 586   1      
 587   1              // $[TH0 - Timer 0 High Byte]
 588   1              // [TH0 - Timer 0 High Byte]$
 589   1      
 590   1              // $[TL0 - Timer 0 Low Byte]
 591   1              // [TL0 - Timer 0 Low Byte]$
 592   1      
 593   1              // $[TH1 - Timer 1 High Byte]
 594   1              /*
 595   1              // TH1 (Timer 1 High Byte) = 0xCB
 596   1              */
 597   1              TH1 = (0x2B << TH1_TH1__SHIFT);
 598   1              // [TH1 - Timer 1 High Byte]$
 599   1      
 600   1              // $[TL1 - Timer 1 Low Byte]
 601   1              /*
 602   1              // TL1 (Timer 1 Low Byte) = 0xCB
 603   1              */
 604   1              //TL1 = (0x2B << TL1_TL1__SHIFT);
 605   1              // [TL1 - Timer 1 Low Byte]$
 606   1      
 607   1              // $[Timer Restoration]
 608   1              //Restore Timer Configuration
 609   1              TCON = TCON_save;
 610   1      
 611   1              // [Timer Restoration]$
 612   1      
 613   1      
 614   1      }
 615          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 616   1              U8 TMR2CN_TR2_save = TMR2CN & TMR2CN_TR2__BMASK;
 617   1              // Stop Timer
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 11  

 618   1              TMR2CN &= ~(TMR2CN_TR2__BMASK);
 619   1              // [Timer Initialization]$
 620   1      
 621   1              // $[TMR2CN - Timer 2 Control]
 622   1              // [TMR2CN - Timer 2 Control]$
 623   1      
 624   1              // $[TMR2H - Timer 2 High Byte]
 625   1              /*
 626   1              // TMR2H (Timer 2 High Byte) = 215
 627   1              */
 628   1              TMR2H = (0x34 << TMR2H_TMR2H__SHIFT);
 629   1              // [TMR2H - Timer 2 High Byte]$
 630   1      
 631   1              // $[TMR2L - Timer 2 Low Byte]
 632   1              /*
 633   1              // TMR2L (Timer 2 Low Byte) = 96
 634   1              */
 635   1              TMR2L = (0x8C << TMR2L_TMR2L__SHIFT);
 636   1              // [TMR2L - Timer 2 Low Byte]$
 637   1      
 638   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 639   1              /*
 640   1              // TMR2RLH (Timer 2 Reload High Byte) = 215
 641   1              */
 642   1              TMR2RLH = (0x34 << TMR2RLH_TMR2RLH__SHIFT);
 643   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 644   1      
 645   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 646   1              /*
 647   1              // TMR2RLL (Timer 2 Reload Low Byte) = 79
 648   1              */
 649   1              TMR2RLL = (0x8C << TMR2RLL_TMR2RLL__SHIFT);
 650   1              // L:C5
 651   1              // H:06
 652   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 653   1      
 654   1              // $[TMR2CN]
 655   1              /*
 656   1              // TR2 (Timer 2 Run Control) = RUN (Start Timer 2 running.)
 657   1              */
 658   1              TMR2CN |= TMR2CN_TR2__RUN;
 659   1              // [TMR2CN]$
 660   1      
 661   1              // $[Timer Restoration]
 662   1              // Restore Timer Configuration
 663   1              TMR2CN |= (TMR2CN_TR2_save);
 664   1              //TMR2CN &= (0xFD);
 665   1              // [Timer Restoration]$
 666   1      
 667   1      
 668   1      }
 669          
 670          
 671          //==============================================================================
 672          // enter_Mode2_from_DefaultMode
 673          //==============================================================================
 674          extern void enter_Mode2_from_DefaultMode(void) {
 675   1              // $[Config Calls]
 676   1              PORTS_1_enter_Mode2_from_DefaultMode();
 677   1              PBCFG_0_enter_Mode2_from_DefaultMode();
 678   1              SMBUS_0_enter_Mode2_from_DefaultMode();
 679   1              TIMER00_0_enter_Mode2_from_DefaultMode();
 680   1              //TIMER16_3_enter_Mode2_from_DefaultMode();
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/16/2018 14:18:29 PAGE 12  

 681   1              TIMER_SETUP_0_enter_Mode2_from_DefaultMode();
 682   1              INTERRUPT_0_enter_Mode2_from_DefaultMode();
 683   1              // [Config Calls]$
 684   1      }
 685          
 686          
 687          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    333    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
