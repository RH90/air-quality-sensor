C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/11/2018 21:29:54 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Rilind\
                    -Desktop\System_project\Exam_Project\Exam_Project_2\F99x-98x_SleepMode_smaRTClockWake\src\InitDevice.c OMF2 SMALL DEBUG O
                    -BJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCD
                    -IR(C:/Users/Rilind/Desktop/System_project/Exam_Project/Exam_Project_2/F99x-98x_SleepMode_smaRTClockWake/inc;C:/SiliconLa
                    -bs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer
                    -/sdks/8051/v4.1.1//Device/C8051F990/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Ini
                    -tDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_C8051F990_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          
  17          //==============================================================================
  18          // enter_DefaultMode_from_RESET
  19          //==============================================================================
  20          extern void enter_DefaultMode_from_RESET(void) {
  21   1              // $[Config Calls]
  22   1              PCA_0_enter_DefaultMode_from_RESET();
  23   1              PORTS_1_enter_DefaultMode_from_RESET();
  24   1              PBCFG_0_enter_DefaultMode_from_RESET();
  25   1              RTC_0_enter_DefaultMode_from_RESET();
  26   1              CLOCK_0_enter_DefaultMode_from_RESET();
  27   1              FLASH_0_enter_DefaultMode_from_RESET();
  28   1              TIMER16_3_enter_DefaultMode_from_RESET();
  29   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  30   1              RSTSRC_0_enter_DefaultMode_from_RESET();
  31   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  32   1              // [Config Calls]$
  33   1      
  34   1      
  35   1      }
  36          
  37          
  38          //================================================================================
  39          // PCA_0_enter_DefaultMode_from_RESET
  40          //================================================================================
  41          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  42   1              // $[Watchdog Disable]
  43   1              // Stop Watchdog
  44   1              // If MCU is reset by WDT before it runs to main(), please disable it in SILABS_STARTUP.A51
  45   1              SFRPAGE = 0x00;
  46   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  47   1      
  48   1              // [Watchdog Disable]$
  49   1      
  50   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/11/2018 21:29:54 PAGE 2   

  51   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]$
  52   1      
  53   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
  54   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
  55   1      
  56   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
  57   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
  58   1      
  59   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
  60   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
  61   1      
  62   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
  63   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
  64   1      
  65   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
  66   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
  67   1      
  68   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
  69   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
  70   1      
  71   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
  72   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
  73   1      
  74   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
  75   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
  76   1      
  77   1              // $[PCA0CN - PCA Control]
  78   1              // [PCA0CN - PCA Control]$
  79   1      
  80   1              // $[PCA0L - PCA Counter/Timer Low Byte]
  81   1              // [PCA0L - PCA Counter/Timer Low Byte]$
  82   1      
  83   1              // $[PCA0H - PCA Counter/Timer High Byte]
  84   1              // [PCA0H - PCA Counter/Timer High Byte]$
  85   1      
  86   1              // $[PCA0PWM - PCA PWM Configuration]
  87   1              // [PCA0PWM - PCA PWM Configuration]$
  88   1      
  89   1              // $[PCA0MD - PCA Mode]
  90   1              // [PCA0MD - PCA Mode]$
  91   1      
  92   1              // $[WDT - Watchdog run Control]
  93   1              // [WDT - Watchdog run Control]$
  94   1      
  95   1      
  96   1      }
  97          
  98          //================================================================================
  99          // PORTS_1_enter_DefaultMode_from_RESET
 100          //================================================================================
 101          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 102   1              // $[P1 - Port 1 Pin Latch]
 103   1              // [P1 - Port 1 Pin Latch]$
 104   1      
 105   1              // $[P1MDOUT - Port 1 Output Mode]
 106   1              /*
 107   1              // B0 (Port 1 Bit 0 Output Mode) = OPEN_DRAIN (P1.0 output is open-
 108   1              //     drain.)
 109   1              // B1 (Port 1 Bit 1 Output Mode) = OPEN_DRAIN (P1.1 output is open-
 110   1              //     drain.)
 111   1              // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 112   1              //     drain.)
 113   1              // B3 (Port 1 Bit 3 Output Mode) = PUSH_PULL (P1.3 output is push-pull.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/11/2018 21:29:54 PAGE 3   

 114   1              // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 115   1              //     drain.)
 116   1              // B5 (Port 1 Bit 5 Output Mode) = PUSH_PULL (P1.5 output is push-pull.)
 117   1              // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 118   1              //     drain.)
 119   1              // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 120   1              //     drain.)
 121   1              */
 122   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN | P1MDOUT_B2__OPEN_DRAIN
 123   1                       | P1MDOUT_B3__PUSH_PULL | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__PUSH_PULL
 124   1                       | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 125   1              // [P1MDOUT - Port 1 Output Mode]$
 126   1      
 127   1              // $[P1MDIN - Port 1 Input Mode]
 128   1              /*
 129   1              // B0 (Port 1 Bit 0 Input Mode) = DIGITAL (P1.0 pin is configured for
 130   1              //     digital mode.)
 131   1              // B1 (Port 1 Bit 1 Input Mode) = DIGITAL (P1.1 pin is configured for
 132   1              //     digital mode.)
 133   1              // B2 (Port 1 Bit 2 Input Mode) = DIGITAL (P1.2 pin is configured for
 134   1              //     digital mode.)
 135   1              // B3 (Port 1 Bit 3 Input Mode) = DIGITAL (P1.3 pin is configured for
 136   1              //     digital mode.)
 137   1              // B4 (Port 1 Bit 4 Input Mode) = DIGITAL (P1.4 pin is configured for
 138   1              //     digital mode.)
 139   1              // B5 (Port 1 Bit 5 Input Mode) = DIGITAL (P1.5 pin is configured for
 140   1              //     digital mode.)
 141   1              // B6 (Port 1 Bit 6 Input Mode) = ANALOG (P1.6 pin is configured for
 142   1              //     analog mode.)
 143   1              // B7 (Port 1 Bit 7 Input Mode) = ANALOG (P1.7 pin is configured for
 144   1              //     analog mode.)
 145   1              */
 146   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
 147   1                       | P1MDIN_B3__DIGITAL | P1MDIN_B4__DIGITAL | P1MDIN_B5__DIGITAL
 148   1                       | P1MDIN_B6__ANALOG | P1MDIN_B7__ANALOG;
 149   1              // [P1MDIN - Port 1 Input Mode]$
 150   1      
 151   1              // $[P1SKIP - Port 1 Skip]
 152   1              /*
 153   1              // B0 (Port 1 Bit 0 Skip) = NOT_SKIPPED (P1.0 pin is not skipped by the
 154   1              //     crossbar.)
 155   1              // B1 (Port 1 Bit 1 Skip) = NOT_SKIPPED (P1.1 pin is not skipped by the
 156   1              //     crossbar.)
 157   1              // B2 (Port 1 Bit 2 Skip) = NOT_SKIPPED (P1.2 pin is not skipped by the
 158   1              //     crossbar.)
 159   1              // B3 (Port 1 Bit 3 Skip) = NOT_SKIPPED (P1.3 pin is not skipped by the
 160   1              //     crossbar.)
 161   1              // B4 (Port 1 Bit 4 Skip) = NOT_SKIPPED (P1.4 pin is not skipped by the
 162   1              //     crossbar.)
 163   1              // B5 (Port 1 Bit 5 Skip) = NOT_SKIPPED (P1.5 pin is not skipped by the
 164   1              //     crossbar.)
 165   1              // B6 (Port 1 Bit 6 Skip) = SKIPPED (P1.6 pin is skipped by the
 166   1              //     crossbar.)
 167   1              // B7 (Port 1 Bit 7 Skip) = SKIPPED (P1.7 pin is skipped by the
 168   1              //     crossbar.)
 169   1              */
 170   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__NOT_SKIPPED | P1SKIP_B2__NOT_SKIPPED
 171   1                       | P1SKIP_B3__NOT_SKIPPED | P1SKIP_B4__NOT_SKIPPED | P1SKIP_B5__NOT_SKIPPED
 172   1                       | P1SKIP_B6__SKIPPED | P1SKIP_B7__SKIPPED;
 173   1              // [P1SKIP - Port 1 Skip]$
 174   1      
 175   1              // $[P1MASK - Port 1 Mask]
 176   1              // [P1MASK - Port 1 Mask]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/11/2018 21:29:54 PAGE 4   

 177   1      
 178   1              // $[P1MAT - Port 1 Match]
 179   1              // [P1MAT - Port 1 Match]$
 180   1      
 181   1              // $[P1DRV - Port 1 Drive Strength]
 182   1              // [P1DRV - Port 1 Drive Strength]$
 183   1      
 184   1      
 185   1      }
 186          
 187          //================================================================================
 188          // PBCFG_0_enter_DefaultMode_from_RESET
 189          //================================================================================
 190          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 191   1              // $[XBR2 - Port I/O Crossbar 2]
 192   1              /*
 193   1              // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 194   1              //     Pullups enabled (except for Ports whose I/O are configured for analog
 195   1              //     mode).)
 196   1              // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 197   1              */
 198   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 199   1              // [XBR2 - Port I/O Crossbar 2]$
 200   1      
 201   1              // $[XBR0 - Port I/O Crossbar 0]
 202   1              // [XBR0 - Port I/O Crossbar 0]$
 203   1      
 204   1              // $[XBR1 - Port I/O Crossbar 1]
 205   1              // [XBR1 - Port I/O Crossbar 1]$
 206   1      
 207   1      
 208   1      }
 209          
 210          //================================================================================
 211          // RTC_0_enter_DefaultMode_from_RESET
 212          //================================================================================
 213          extern void RTC_0_enter_DefaultMode_from_RESET(void) {
 214   1              // $[RTC Initialization]
 215   1              // A variable for providing a delay for external oscillator startup
 216   1              U16 delayCounter;
 217   1              // Save the system clock (the system clock will be slowed during the startup delay)
 218   1              U8 CLKSEL_save = CLKSEL;
 219   1      
 220   1              // Enable power to the SmaRTClock oscillator circuit (RTC0EN = 1)
 221   1              // [RTC Initialization]$
 222   1      
 223   1              // $[RTC0XCN - RTC Oscillator Control: Initial start-up setting]
 224   1              // Set SmaRTClock to Crystal Mode (XMODE = 1).
 225   1              // Disable Automatic Gain Control (AGCEN) and enable Bias Doubling (BIASX2) for fast crystal startup.
 226   1              RTC0ADR = RTC0XCN;
 227   1              RTC0DAT = RTC0XCN_XMODE__CRYSTAL | RTC0XCN_BIASX2__ENABLED;
 228   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 229   1              // [RTC0XCN - RTC Oscillator Control: Initial start-up setting]$
 230   1      
 231   1              // $[RTC0XCF - RTC Oscillator Configuration]
 232   1              /*
 233   1              // AUTOSTP (Automatic Load Capacitance Stepping Enable) = ENABLED (Enable
 234   1              //     load capacitance stepping.)
 235   1              // LOADCAP (Load Capacitance Programmed Value) = 3
 236   1              */
 237   1              RTC0ADR = RTC0XCF;
 238   1              RTC0DAT = RTC0XCF_AUTOSTP__ENABLED | (3 << RTC0XCF_LOADCAP__SHIFT);
 239   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/11/2018 21:29:54 PAGE 5   

 240   1              // [RTC0XCF - RTC Oscillator Configuration]$
 241   1      
 242   1              // $[CAPTURE0 - RTC Timer Capture 0]
 243   1              // [CAPTURE0 - RTC Timer Capture 0]$
 244   1      
 245   1              // $[CAPTURE1 - RTC Timer Capture 1]
 246   1              // [CAPTURE1 - RTC Timer Capture 1]$
 247   1      
 248   1              // $[CAPTURE2 - RTC Timer Capture 2]
 249   1              // [CAPTURE2 - RTC Timer Capture 2]$
 250   1      
 251   1              // $[CAPTURE3 - RTC Timer Capture 3]
 252   1              // [CAPTURE3 - RTC Timer Capture 3]$
 253   1      
 254   1              // $[ALARM0 - RTC Alarm Programmed Value 0]
 255   1              // [ALARM0 - RTC Alarm Programmed Value 0]$
 256   1      
 257   1              // $[ALARM1 - RTC Alarm Programmed Value 1]
 258   1              // [ALARM1 - RTC Alarm Programmed Value 1]$
 259   1      
 260   1              // $[ALARM2 - RTC Alarm Programmed Value 2]
 261   1              /*
 262   1              // ALARM2 (RTC Alarm Programmed Value 2) = 1
 263   1              */
 264   1              RTC0ADR = ALARM2;
 265   1              RTC0DAT = (1 << ALARM2_ALARM2__SHIFT);
 266   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 267   1              // [ALARM2 - RTC Alarm Programmed Value 2]$
 268   1      
 269   1              // $[ALARM3 - RTC Alarm Programmed Value 3]
 270   1              // [ALARM3 - RTC Alarm Programmed Value 3]$
 271   1      
 272   1              // $[RTC0CN - RTC Control]
 273   1              /*
 274   1              // RTC0EN (RTC Enable) = ENABLED (Enable RTC oscillator.)
 275   1              */
 276   1              RTC0ADR = RTC0CN;
 277   1              RTC0DAT = 0;
 278   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 279   1      
 280   1              RTC0ADR = RTC0CN;
 281   1              RTC0DAT |= RTC0CN_RTC0EN__ENABLED;
 282   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 283   1      
 284   1              // [RTC0CN - RTC Control]$
 285   1      
 286   1              // $[External Oscillator Setup]
 287   1              // Set the clock to a known value for the delay
 288   1              CLKSEL = CLKSEL_CLKSL__LPOSC | CLKSEL_CLKDIV__SYSCLK_DIV_128;
 289   1      
 290   1              // Delay for > 20 ms
 291   1              for (delayCounter=0x150;delayCounter!=0;delayCounter--);
 292   1      
 293   1              // Poll the SmaRTClock Clock Valid Bit (CLKVLD) until the crystal oscillator stabilizes
 294   1              do {
 295   2              RTC0ADR = RTC0ADR_BUSY__SET | RTC0ADR_ADDR__RTC0XCN;
 296   2              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 297   2              } while ((RTC0DAT & RTC0XCN_CLKVLD__BMASK)== RTC0XCN_CLKVLD__NOT_SET);
 298   1      
 299   1              // Poll the SmaRTClock Load Capacitance Ready Bit (LOADRDY) until the load capacitance reaches its progra
             -mmed value
 300   1              do {
 301   2              RTC0ADR = RTC0ADR_BUSY__SET | RTC0ADR_ADDR__RTC0XCF;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/11/2018 21:29:54 PAGE 6   

 302   2              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 303   2              } while ((RTC0DAT & RTC0XCF_LOADRDY__BMASK)== RTC0XCF_LOADRDY__NOT_SET);
 304   1      
 305   1              // Enable Automatic Gain Control (AGCEN) and disable Bias Doubling (BIASX2) for maximum power savings
 306   1              /*
 307   1              // XMODE (RTC Oscillator Mode) = CRYSTAL (Crystal Mode selected.)
 308   1              // AGCEN (RTC Oscillator Automatic Gain Control (AGC) Enable) = ENABLED
 309   1              //     (Enable AGC.)
 310   1              // BIASX2 (RTC Oscillator Bias Double Enable) = DISABLED (Disable the
 311   1              //     Bias Double feature.)
 312   1              // LFOEN (Low Frequency Oscillator Enable and Select) = DISABLED (XMODE
 313   1              //     determines RTC oscillator source.)
 314   1              */
 315   1              RTC0ADR = RTC0XCN;
 316   1              RTC0DAT = RTC0XCN_XMODE__CRYSTAL | RTC0XCN_AGCEN__ENABLED | RTC0XCN_BIASX2__DISABLED
 317   1                       | RTC0XCN_LFOEN__DISABLED;
 318   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 319   1      
 320   1              // Enable the SmaRTClock missing clock detector.
 321   1              /*
 322   1              // MCLKEN (Missing RTC Detector Enable) = ENABLED (Enable missing RTC
 323   1              //     detector.)
 324   1              */
 325   1              RTC0ADR = RTC0CN;
 326   1              RTC0DAT |= RTC0CN_MCLKEN__ENABLED;
 327   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 328   1      
 329   1              // Delay for > 2 ms
 330   1              for (delayCounter=0x100;delayCounter!=0;delayCounter--);
 331   1      
 332   1              // Clear PMU wake-up source flags
 333   1              PMU0CF = PMU0CF_CLEAR__ALL_FLAGS;
 334   1      
 335   1              // Restore system clock
 336   1              CLKSEL = CLKSEL_save;
 337   1              // Poll CLKRDY to wait for the clock to stabilize
 338   1              while(!((CLKSEL & CLKSEL_CLKRDY__BMASK) == CLKSEL_CLKRDY__SET));
 339   1      
 340   1              /*
 341   1              // RTC0EN (RTC Enable) = ENABLED (Enable RTC oscillator.)
 342   1              // RTC0TR (RTC Timer Run Control) = STOP (RTC timer is stopped.)
 343   1              // MCLKEN (Missing RTC Detector Enable) = ENABLED (Enable missing RTC
 344   1              //     detector.)
 345   1              // RTC0AEN (RTC Alarm Enable) = DISABLED (Disable RTC alarm.)
 346   1              // ALRM (RTC Alarm Event Flag and Auto Reset Enable) = NOT_SET (Alarm
 347   1              //     event flag is not set or disable the auto reset function.)
 348   1              // RTC0CAP (RTC Timer Capture) = NOT_SET (Do not start a capture
 349   1              //     operation.)
 350   1              // RTC0SET (RTC Timer Set) = NOT_SET (Do not start a set operation.)
 351   1              */
 352   1              RTC0ADR = RTC0CN;
 353   1              RTC0DAT = RTC0CN_RTC0EN__ENABLED | RTC0CN_RTC0TR__STOP | RTC0CN_MCLKEN__ENABLED
 354   1                       | RTC0CN_RTC0AEN__DISABLED | RTC0CN_ALRM__NOT_SET | RTC0CN_RTC0CAP__NOT_SET
 355   1                       | RTC0CN_RTC0SET__NOT_SET;
 356   1              while((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET);    //Poll Busy Bit
 357   1      
 358   1              // [External Oscillator Setup]$
 359   1      
 360   1      
 361   1      }
 362          
 363          //================================================================================
 364          // CLOCK_0_enter_DefaultMode_from_RESET
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/11/2018 21:29:54 PAGE 7   

 365          //================================================================================
 366          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 367   1              // $[CLKSEL - Clock Select]
 368   1              /*
 369   1              // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 370   1              //     selected clock source divided by 1.)
 371   1              // CLKSL (Clock Source Select) = LPOSC (Clock derived from the Internal
 372   1              //     Low Power Oscillator.)
 373   1              */
 374   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__LPOSC;
 375   1              // [CLKSEL - Clock Select]$
 376   1      
 377   1      
 378   1      }
 379          
 380          //================================================================================
 381          // FLASH_0_enter_DefaultMode_from_RESET
 382          //================================================================================
 383          extern void FLASH_0_enter_DefaultMode_from_RESET(void) {
 384   1              // $[FLSCL - Flash Scale]
 385   1              /*
 386   1              // BYPASS (Flash Read Timing One-Shot Bypass) = SYSCLK (The system clock
 387   1              //     determines the flash read time. This setting should be used for
 388   1              //     frequencies greater than 14 MHz.)
 389   1              */
 390   1              FLSCL = FLSCL_BYPASS__SYSCLK;
 391   1              // [FLSCL - Flash Scale]$
 392   1      
 393   1      
 394   1      }
 395          
 396          //================================================================================
 397          // TIMER16_3_enter_DefaultMode_from_RESET
 398          //================================================================================
 399          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 400   1              // $[Timer Initialization]
 401   1              // Save Timer Configuration
 402   1              U8 TMR3CN_TR3_save = TMR3CN & TMR3CN_TR3__BMASK;
 403   1              // Stop Timer
 404   1              TMR3CN &= ~(TMR3CN_TR3__BMASK);
 405   1              // [Timer Initialization]$
 406   1      
 407   1              // $[TMR3CN - Timer 3 Control]
 408   1              /*
 409   1              // T3XCLK (Timer 3 External Clock Select) = RTC_CAP_EXTOSC (External
 410   1              //     Clock is RTC. Capture trigger is External Oscillator/8.)
 411   1              */
 412   1              TMR3CN |= TMR3CN_T3XCLK__RTC_CAP_EXTOSC;
 413   1              // [TMR3CN - Timer 3 Control]$
 414   1      
 415   1              // $[TMR3H - Timer 3 High Byte]
 416   1              /*
 417   1              // TMR3H (Timer 3 High Byte) = 249
 418   1              */
 419   1              TMR3H = (249 << TMR3H_TMR3H__SHIFT);
 420   1              // [TMR3H - Timer 3 High Byte]$
 421   1      
 422   1              // $[TMR3L - Timer 3 Low Byte]
 423   1              /*
 424   1              // TMR3L (Timer 3 Low Byte) = 154
 425   1              */
 426   1              TMR3L = (154 << TMR3L_TMR3L__SHIFT);
 427   1              // [TMR3L - Timer 3 Low Byte]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/11/2018 21:29:54 PAGE 8   

 428   1      
 429   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 430   1              /*
 431   1              // TMR3RLH (Timer 3 Reload High Byte) = 249
 432   1              */
 433   1              TMR3RLH = (249 << TMR3RLH_TMR3RLH__SHIFT);
 434   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 435   1      
 436   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 437   1              /*
 438   1              // TMR3RLL (Timer 3 Reload Low Byte) = 154
 439   1              */
 440   1              TMR3RLL = (154 << TMR3RLL_TMR3RLL__SHIFT);
 441   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 442   1      
 443   1              // $[TMR3CN]
 444   1              /*
 445   1              // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 446   1              */
 447   1              TMR3CN |= TMR3CN_TR3__RUN;
 448   1              // [TMR3CN]$
 449   1      
 450   1              // $[Timer Restoration]
 451   1              // Restore Timer Configuration
 452   1              TMR3CN |= TMR3CN_TR3_save;
 453   1              // [Timer Restoration]$
 454   1      
 455   1      
 456   1      }
 457          
 458          //================================================================================
 459          // TIMER_SETUP_0_enter_DefaultMode_from_RESET
 460          //================================================================================
 461          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 462   1              // $[CKCON - Clock Control]
 463   1              // [CKCON - Clock Control]$
 464   1      
 465   1              // $[TMOD - Timer 0/1 Mode]
 466   1              // [TMOD - Timer 0/1 Mode]$
 467   1      
 468   1              // $[TCON - Timer 0/1 Control]
 469   1              // [TCON - Timer 0/1 Control]$
 470   1      
 471   1      
 472   1      }
 473          
 474          //================================================================================
 475          // RSTSRC_0_enter_DefaultMode_from_RESET
 476          //================================================================================
 477          extern void RSTSRC_0_enter_DefaultMode_from_RESET(void) {
 478   1              // $[RSTSRC - Reset Source]
 479   1              /*
 480   1              // C0RSEF (Comparator0 Reset Enable and Flag) = NOT_SET (A Comparator 0
 481   1              //     reset did not occur.)
 482   1              // MCDRSF (Missing Clock Detector Enable and Flag) = SET (A missing clock
 483   1              //     detector reset occurred.)
 484   1              // PORSF (Power-On / Supply Monitor Reset Flag, and Supply Monitor Reset
 485   1              //     Enable) = SET (A power-on or supply monitor reset occurred.)
 486   1              // RTC0RE (RTC Reset Enable and Flag) = NOT_SET (A RTC alarm or
 487   1              //     oscillator fail reset did not occur.)
 488   1              // SWRSF (Software Reset Force and Flag) = NOT_SET (A software reset did
 489   1              //     not occur.)
 490   1              */
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/11/2018 21:29:54 PAGE 9   

 491   1              RSTSRC = RSTSRC_C0RSEF__NOT_SET | RSTSRC_MCDRSF__SET | RSTSRC_PORSF__SET
 492   1                       | RSTSRC_RTC0RE__NOT_SET | RSTSRC_SWRSF__NOT_SET;
 493   1              // [RSTSRC - Reset Source]$
 494   1      
 495   1      
 496   1      }
 497          
 498          //================================================================================
 499          // INTERRUPT_0_enter_DefaultMode_from_RESET
 500          //================================================================================
 501          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 502   1              // $[EIE1 - Extended Interrupt Enable 1]
 503   1              /*
 504   1              // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 505   1              //     ADC0 Conversion Complete interrupt.)
 506   1              // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 507   1              //     interrupts.)
 508   1              // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 509   1              //     (Disable all PCA0 interrupts.)
 510   1              // ERTC0A (RTC Alarm Interrupt Enable) = DISABLED (Disable RTC Alarm
 511   1              //     interrupts.)
 512   1              // ESMB0 (SMBus (SMB0) Interrupt Enable) = DISABLED (Disable all SMB0
 513   1              //     interrupts.)
 514   1              // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 515   1              //     generated by the TF3L or TF3H flags.)
 516   1              // EWADC0 (Window Comparison ADC0 Interrupt Enable) = DISABLED (Disable
 517   1              //     ADC0 Window Comparison interrupt.)
 518   1              */
 519   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_ECP0__DISABLED | EIE1_EPCA0__DISABLED
 520   1                       | EIE1_ERTC0A__DISABLED | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED
 521   1                       | EIE1_EWADC0__DISABLED;
 522   1              // [EIE1 - Extended Interrupt Enable 1]$
 523   1      
 524   1              // $[EIP1 - Extended Interrupt Priority 1]
 525   1              // [EIP1 - Extended Interrupt Priority 1]$
 526   1      
 527   1              // $[IE - Interrupt Enable]
 528   1              /*
 529   1              // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 530   1              //     to its individual mask setting.)
 531   1              // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 532   1              //     interrupt 0.)
 533   1              // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 534   1              //     interrupt 1.)
 535   1              // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 536   1              //     interrupts.)
 537   1              // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 538   1              //     interrupt.)
 539   1              // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 540   1              //     interrupt.)
 541   1              // ET2 (Timer 2 Interrupt Enable) = DISABLED (Disable Timer 2 interrupt.)
 542   1              // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 543   1              */
 544   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 545   1                       | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__DISABLED | IE_ES0__DISABLED;
 546   1              // [IE - Interrupt Enable]$
 547   1      
 548   1              // $[IP - Interrupt Priority]
 549   1              // [IP - Interrupt Priority]$
 550   1      
 551   1              // $[EIE2 - Extended Interrupt Enable 2]
 552   1              // [EIE2 - Extended Interrupt Enable 2]$
 553   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/11/2018 21:29:54 PAGE 10  

 554   1              // $[EIP2 - Extended Interrupt Priority 2]
 555   1              // [EIP2 - Extended Interrupt Priority 2]$
 556   1      
 557   1      
 558   1      }
 559          
 560          
 561          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    259    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
